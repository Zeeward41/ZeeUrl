name: Install Servers CI - Jenkins and SonarQube
on:
  push:
    paths:
      - 'infrastructure/CI/**'
      - '.github/workflows/install_servers_ci.yaml'
jobs:
  config_Server:
    runs-on: ubuntu-latest

    env:
      TF_VERSION: '1.10.1'
      AWS_REGION: 'eu-north-1'
    steps:
      - name: get github code
        uses: actions/checkout@v4

      - name: Get Runner IP
        id: get_ip_runner
        run: |
          RUNNER_IP=$(curl -s https://api.ipify.org)
          echo "runner_ip=$RUNNER_IP" >> $GITHUB_OUTPUT
          echo "Runner IP is: $RUNNER_IP"

      - name: Config AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION}}

      - name: Terraform init
        run: terraform init
        working-directory: infrastructure/CI/terraform

      - name: Terraform Format
        run: terraform fmt
        working-directory: infrastructure/CI/terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: infrastructure/CI/terraform

      - name: Terraform Plan
        run: terraform plan -var-file="env.tfvars" -out=tfplan
        working-directory: infrastructure/CI/terraform

      - name: Terraform apply
        if: github.ref == 'refs/heads/master'
        run: terraform apply -var-file="env.tfvars" -auto-approve tfplan
        working-directory: infrastructure/CI/terraform

      - name: get IP servers jenkins and sonarQube
        id: get_ip_servers
        run: |
          FILE_IP_JENKINS=$(cat infrastructure/CI/terraform/ip_jenkins_server.txt)
          FILE_IP_SONARQUBE=$(cat infrastructure/CI/terraform/ip_sonarQube_server.txt)
          # Store data as Output
          echo file_ip_jenkins=$FILE_IP_JENKINS >> $GITHUB_OUTPUT
          echo file_ip_sonarQube=$FILE_IP_SONARQUBE >> $GITHUB_OUTPUT

      - name: Get group name SG servers Jenkins and SonarQube
        id: get_group_name
        run: |
          GROUP_NAME_JENKINS=$(cat infrastructure/CI/terraform/group_name_jenkins_SG.txt)
          GROUP_NAME_SONARQUBE=$(cat infrastructure/CI/terraform/group_name_sonarQube_SG.txt)
          # Store data as Output
          echo "file_group_name_jenkins=$GROUP_NAME_JENKINS" >> $GITHUB_OUTPUT
          echo "file_group_name_sonarQube=$GROUP_NAME_SONARQUBE" >> $GITHUB_OUTPUT
      
      - name: Add Github Runner IP to SG servers (sonarQube and Jenkins)
        run: |
          aws ec2 authorize-security-group-ingress --group-name ${{steps.get_group_name.outputs.file_group_name_jenkins}} --protocol tcp --port 22 --cidr ${{steps.get_ip_runner.outputs.runner_ip}}/32
          aws ec2 authorize-security-group-ingress --group-name ${{steps.get_group_name.outputs.file_group_name_sonarQube}} --protocol tcp --port 22 --cidr ${{steps.get_ip_runner.outputs.runner_ip}}/32

          
      - name: Add IP SonarQube to SG Jenkins servers (TCP - port 8080)
        run: |
          aws ec2 authorize-security-group-ingress --group-name ${{steps.get_group_name.outputs.file_group_name_jenkins}} --protocol tcp --port 8080 --cidr ${{steps.get_ip_servers.outputs.file_ip_sonarQube}}/32


      - name: Add IP Jenkins to SG SonarQube servers (TCP - port 9000 )
        run: |
          aws ec2 authorize-security-group-ingress --group-name ${{steps.get_group_name.outputs.file_group_name_sonarQube}} --protocol tcp --port 9000 --cidr ${{steps.get_ip_servers.outputs.file_ip_jenkins}}/32

      - name: Get Private Key
        id: read_file
        run: |
          if [ -f infrastructure/CI/terraform/la_clef_private.pem ]; then
            FILE_CONTENT=$(base64 -w 0 infrastructure/CI/terraform/la_clef_private.pem)

            # store data as Output
            echo "$FILE_CONTENT"
            echo file_content=$FILE_CONTENT >> $GITHUB_OUTPUT
          else
            echo "File not Found"
            exit 0
          fi
      
      - name: Get DNS instance Jenkins and SonarQube
        id: get_dns
        run: |
          FILE_DNS_JENKINS=$(cat infrastructure/CI/terraform/dns_instance_jenkins.txt)
          FILE_DNS_SONARQUBE=$(cat infrastructure/CI/terraform/dns_instance_sonarqube.txt)
          # Store data as Output
          echo file_dns_jenkins=$FILE_DNS_JENKINS >> $GITHUB_OUTPUT
          echo file_dns_sonarqube=$FILE_DNS_SONARQUBE >> $GITHUB_OUTPUT

      - name: Add SSH Key to Github Secrets
        env:
          GH_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          SSH_KEY: ${{ steps.read_file.outputs.file_content }}
        run: |
          SSH_KEY=$(echo "$SSH_KEY" | base64 -d)
          gh secret set SSH_PRIVATE_KEY --body "$SSH_KEY"
      
      # - name: install Ansible and Dependencies
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y ansible python3-pip
      #     pip3 install boto3 botocore

        
      - name: Setup SSH key Jenkins and SonarQube
        env:
          INSTANCE_DNS_JENKINS: ${{ steps.get_dns.outputs.file_dns_jenkins}}
          INSTANCE_DNS_SONARQUBE: ${{ steps.get_dns.outputs.file_dns_sonarqube}}
        run: |
          eval `ssh-agent -s`
          mkdir -p /home/runner/.ssh/
          echo "${{secrets.SSH_PRIVATE_KEY}}" > /home/runner/.ssh/key_ssh
          chmod 700 /home/runner/.ssh/key_ssh
          
          # Verify key format
          ssh-keygen -y -f /home/runner/.ssh/key_ssh || echo "Error Validation key"

          # add key to SSH agent
          ssh-add /home/runner/.ssh/key_ssh

          # Add host key
          ssh-keyscan -t rsa,dsa,ecdsa,ed25519 $INSTANCE_DNS_JENKINS >> /home/runner/.ssh/known_hosts
          ssh-keyscan -t rsa,dsa,ecdsa,ed25519 $INSTANCE_DNS_SONARQUBE >> /home/runner/.ssh/known_hosts
          #
      
      # - name: Run Ansible Playbook
      #   env:
      #     INSTANCE_DNS_JENKINS: ${{ steps.get_dns.outputs.file_dns_jenkins}}
      #     INSTANCE_DNS_SONARQUBE: ${{ steps.get_dns.outputs.file_dns_sonarqube}}
      #     SSH_KKEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #   run: |
      #     # chmod 400 infrastructure/CI/terraform/la_clef_private.pem
      #     echo "$SSH_KKEY" > /home/runner/my_key.pem
      #     chmod 400 /home/runner/my_key.pem
          
      #     # Creation config SSH
      #     echo "Config SSH"
      #     echo -e "Host jenkins\n\t Hostname $INSTANCE_DNS_JENKINS\n\t User ubuntu\n\t IdentityFile /home/runner/my_key.pem\n" > /home/runner/.ssh/config
      #     echo -e "Host sonarqube\n\t Hostname $INSTANCE_DNS_SONARQUBE\n\t User ubuntu\n\t IdentityFile /home/runner/my_key.pem\n" >> /home/runner/.ssh/config
      #     cat /home/runner/.ssh/config

      #     # Creation inventory
      #     echo "Creation inventory"
      #     echo -e "[jenkins]\njenkins\n" > infrastructure/CI/ansible/inventory
      #     echo -e "[sonarqube]\nsonarqube\n" >> infrastructure/CI/ansible/inventory
      #     cat infrastructure/CI/ansible/inventory

      #     #Run ansible
      #     echo "Install and Configure Jenkins"
      #     ansible-playbook -i infrastructure/CI/ansible/inventory infrastructure/CI/ansible/configuration_jenkins.yaml

      #     echo "Install Trivy on Jenkins Server"
      #     ansible-playbook -i infrastructure/CI/ansible/inventory infrastructure/CI/ansible/install_trivy.yaml

      #     echo "Install and Configure SonarQube"
      #     ansible-playbook -i infrastructure/CI/ansible/inventory infrastructure/CI/ansible/configuration_sonarqube.yaml

      

      
      - name: Delete Github Actions IP to SG
        run: |
          aws ec2 revoke-security-group-ingress --group-name jenkins-SG --protocol tcp --port 22 --cidr ${{steps.get_ip.outputs.runner_ip}}/32
          aws ec2 revoke-security-group-ingress --group-name sonarQube-SG --protocol tcp --port 22 --cidr ${{steps.get_ip.outputs.runner_ip}}/32
        if: always()