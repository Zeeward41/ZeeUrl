name: Create Servers for Kubernetes
on: workflow_dispatch
jobs:
  CreateServers:
    runs-on: ubuntu-latest

    env:
      TF_VERSION: '1.10.1'
      AWS_REGION: 'eu-north-1'
    steps:
      - name: get github code
        uses: actions/checkout@v4
      
      - name: Add my IP to env.tfvars
        env: 
          MY_IP: ${{ secrets.MY_IP }}
        run: |

          # delete last line (mon_ip = 0.0.0.0/0 (default))
          sed -i '$ d' infrastructure/CD/terraform/env.tfvars

          # add my ip to env.tfvars
          echo "mon_ip = $MY_IP" >> infrastructure/CD/terraform/env.tfvars

      - name: Get Runner IP
        id: get_ip_runner
        run: |
          RUNNER_IP=$(curl -s https://api.ipify.org)
          echo "runner_ip=$RUNNER_IP" >> $GITHUB_OUTPUT
          echo "Runner IP is: $RUNNER_IP"

      - name: Config AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION}}

      - name: Terraform init
        run: terraform init
        working-directory: infrastructure/CD/terraform

      - name: Terraform Format
        run: terraform fmt
        working-directory: infrastructure/CD/terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: infrastructure/CD/terraform

      - name: Terraform Plan
        run: terraform plan -var-file=env.tfvars -out=tfplan
        working-directory: infrastructure/CD/terraform

      - name: Terraform apply
        if: github.ref == 'refs/heads/master'
        run: terraform apply -var-file=env.tfvars -auto-approve tfplan
        working-directory: infrastructure/CD/terraform

      - name: Get group name SG Kubernetes Servers
        id: get_group_name
        run: |
          GROUP_NAME_KUBERNETES=$(cat infrastructure/CD/terraform/sg_kubernetes_name.txt)
          # Store data as Output
          echo "file_group_name_kubernetes=$GROUP_NAME_KUBERNETES" >> $GITHUB_OUTPUT
      
      - name: Add Github Runner IP to SG Kubernetes servers 
        run: |
          aws ec2 authorize-security-group-ingress --group-name ${{steps.get_group_name.outputs.file_group_name_kubernetes}} --protocol tcp --port 22 --cidr ${{steps.get_ip_runner.outputs.runner_ip}}/32
          
      - name: Get Private Key
        id: read_file
        run: |
          if [ -f infrastructure/CD/terraform/private_key.pem ]; then
            FILE_CONTENT=$(base64 -w 0 infrastructure/CD/terraform/private_key.pem)

            # store data as Output
            echo "$FILE_CONTENT"
            echo file_content=$FILE_CONTENT >> $GITHUB_OUTPUT
          else
            echo "File not Found"
            exit 0
          fi
      
      - name: Get DNS Kubernetes Servers
        id: get_dns
        run: |
          FILE_DNS_MASTER=$(cat infrastructure/CD/terraform/dns_master.txt)
          FILE_DNS_NODE1=$(cat infrastructure/CD/terraform/dns_node1.txt)
          FILE_DNS_NODE2=$(cat infrastructure/CD/terraform/dns_node2.txt)
          # Store data as Output
          echo file_dns_master=$FILE_DNS_MASTER >> $GITHUB_OUTPUT
          echo file_dns_node1=$FILE_DNS_NODE1 >> $GITHUB_OUTPUT
          echo file_dns_node2=$FILE_DNS_NODE2 >> $GITHUB_OUTPUT

      - name: Add SSH Key to Github Secrets
        env:
          GH_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          SSH_KEY: ${{ steps.read_file.outputs.file_content }}
        run: |
          SSH_KEY=$(echo "$SSH_KEY" | base64 -d)
          gh secret set SSH_PRIVATE_KEY_KUBERNETES --body "$SSH_KEY"
      
      - name: install Ansible and Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible python3-pip
          pip3 install boto3 botocore

        
      - name: Setup SSH key Kubernetes Server
        env:
          INSTANCE_DNS_MASTER: ${{ steps.get_dns.outputs.file_dns_master}}
          INSTANCE_DNS_NODE_ONE: ${{ steps.get_dns.outputs.file_dns_node1}}
          INSTANCE_DNS_NODE_TWO: ${{ steps.get_dns.outputs.file_dns_node2}}
        run: |
          eval `ssh-agent -s`
          mkdir -p /home/runner/.ssh/
          echo "${{secrets.SSH_PRIVATE_KEY_KUBERNETES}}" > /home/runner/.ssh/key_ssh
          sleep 1
          chmod 600 /home/runner/.ssh/key_ssh
          
          # Verify key format
          ssh-keygen -y -f /home/runner/.ssh/key_ssh || echo "Error Validation key"

          # add key to SSH agent
          ssh-add /home/runner/.ssh/key_ssh

          # Add host key
          ssh-keyscan -t rsa,dsa,ecdsa,ed25519 $INSTANCE_DNS_MASTER >> /home/runner/.ssh/known_hosts
          ssh-keyscan -t rsa,dsa,ecdsa,ed25519 $INSTANCE_DNS_NODE_ONE >> /home/runner/.ssh/known_hosts
          ssh-keyscan -t rsa,dsa,ecdsa,ed25519 $INSTANCE_DNS_NODE_TWO >> /home/runner/.ssh/known_hosts
      
      - name: Configure Ansible
        env:
          INSTANCE_DNS_MASTER: ${{ steps.get_dns.outputs.file_dns_master}}
          INSTANCE_DNS_NODE_ONE: ${{ steps.get_dns.outputs.file_dns_node1}}
          INSTANCE_DNS_NODE_TWO: ${{ steps.get_dns.outputs.file_dns_node2}}
          SSH_KKEY: ${{ secrets.SSH_PRIVATE_KEY_KUBERNETES }}
        run: |
          # chmod 400 infrastructure/CD/terraform/private_key.pem
          echo "$SSH_KKEY" > /home/runner/my_key.pem
          chmod 400 /home/runner/my_key.pem
          
          # Creation config SSH
          echo "Config SSH"
          echo -e "Host master_node\n\t Hostname $INSTANCE_DNS_MASTER\n\t User ubuntu\n\t IdentityFile /home/runner/my_key.pem\n" > /home/runner/.ssh/config

          echo -e "Host node1\n\t Hostname $INSTANCE_DNS_NODE_ONE\n\t User ubuntu\n\t IdentityFile /home/runner/my_key.pem\n" >> /home/runner/.ssh/config

          echo -e "Host node2\n\t Hostname $INSTANCE_DNS_NODE_TWO\n\t User ubuntu\n\t IdentityFile /home/runner/my_key.pem\n" >> /home/runner/.ssh/config

          cat /home/runner/.ssh/config

          # Creation inventory
          echo "Creation inventory"
          echo -e "[workers]\nnode1\nnode2\n\n[control_plane]\nmaster_node" > infrastructure/CD/ansible/inventory
          cat infrastructure/CD/ansible/inventory

      - name: Run Ansible Playbook
        run: |
          #Run ansible
          echo "Setup User k8sadmin"
          ansible-playbook -i inventory setup_user.yaml

          echo "Ensure IPv4 packet forwarding"
          ansible-playbook -i inventory ensure_IPv4_forwarding.yaml

          echo "Install containerD"
          ansible-playbook -i inventory install_containerd.yaml

          echo "install kubeadm"
          ansible-playbook -i inventory install_kubeadm.yaml

          echo "create cluster"
          ansible-playbook -i inventory create_cluster.yaml

          echo "setup Workers nodes"
          ansible-playbook -i inventory setup_workers.yaml

          echo "Install and config Vim"
          ansible-playbook -i inventory install_config_vim.yaml


        working-directory: infrastructure/CD/ansible
      
      - name: Delete Github Actions IP to SG kubernetes Servers
        run: |
          aws ec2 revoke-security-group-ingress --group-name ${{steps.get_group_name.outputs.file_group_name_kubernetes}} --protocol tcp --port 22 --cidr ${{steps.get_ip_runner.outputs.runner_ip}}/32
        if: always()
