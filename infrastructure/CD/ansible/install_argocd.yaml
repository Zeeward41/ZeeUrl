---
- hosts: control_plane
  become: yes
  become_user: k8sadmin
  vars_files:
    - vars/common_vars.yaml
  
  tasks:
    - name: Install required system packages
      become_user: root
      become: yes
      apt:
        update_cache: yes
        name:
          - python3-kubernetes
          - python3-yaml
          - python3-jsonpatch
          - python3-openshift
        state: present
  
    - name: Check if argocd namespace exists
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: argocd
      register: namespace_status
      ignore_errors: true

    - name: Create argocd namespace (if it does not exist)
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: argocd
        state: present
      when: namespace_status.failed or namespace_status.resources | length == 0

    - name: Download ArgoCD manifests
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/argoproj/argo-cd/{{ argocd }}/manifests/install.yaml
        dest: /tmp/argocd-install.yaml
        force: true
        mode: '0644'

    - name: Apply argoCD manifests
      kubernetes.core.k8s:
        state: present
        src: /tmp/argocd-install.yaml
        namespace: argocd
        apply: yes

    - name: Change Service argocd-server to NodePort
      kubernetes.core.k8s:
        api_version: v1
        kind: Service
        namespace: argocd
        name: argocd-server
        definition:
          spec:
            type: NodePort
            ports:
            - name: http
              port: 80
              protocol: TCP
              targetPort: 8080
              nodePort: 30080
            - name: https
              port: 443
              protocol: TCP
              targetPort: 8080
              nodePort: 30443
        state: patched

    - name: Clean up temporary files
      ansible.builtin.file:
        path: /tmp/argocd-install.yaml
        state: absent

    - name: Check if argocd-initial-admin-secret exists
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: argocd-initial-admin-secret
        namespace: argocd
      register: secret_check
      ignore_errors: true

    - name: Get initial password if secret_check exists
      shell: |
        kubectl get -n argocd secret argocd-initial-admin-secret -o json | jq .data.password -r | base64 -d
      register: argocd_password_init
      when: secret_check.resources | length > 0
      changed_when: false
      no_log: true

    - name: Set ArgoCD password
      set_fact:
        argocd_password_env: "{{ lookup('env', 'ANSIBLE_ARGOCD_SECRET') }}"
      when: secret_check.resources | length == 0
      no_log: true
    
    - name: Consolidate ArgoCD password
      set_fact:
        argocd_password: "{{ argocd_password_init.stdout if secret_check.resources | length > 0 else argocd_password_env }}"
      no_log: true

    - name: Display password (for demonstration) # DELETE##########################
      debug:
        var: argocd_password
      no_log: false

    - name: Check if ArgoCD is already installed
      become_user: k8sadmin
      become: yes
      stat:
        path: /usr/local/bin/argocd
      register: argocd_check
    
    - name: Download and install ArgoCD
      block:
        - name: Download ArgoCD
          get_url:
            url: https://github.com/argoproj/argo-cd/releases/download/{{ argocd }}/argocd-linux-amd64
            dest: /tmp/argocd-linux-amd64
            mode: '0755'

        - name: Rename and move ArgoCD
          command: sudo mv /tmp/argocd-linux-amd64 /usr/local/bin/argocd
          become: yes

        - name: Remove temporary file
          become: yes
          file:
            path: /tmp/argocd-linux-amd64
            state: absent
      when: not argocd_check.stat.exists

    - name: Get IP of argocd-server ClusterIP service
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: argocd-server
        namespace: argocd
      register: argocd_service

    - name: Extract ClusterIP service IP
      set_fact:
        argocd_clusterip: "{{ argocd_service.resources[0].spec.clusterIP }}"
    
    - name: Login to ArgoCD
      become_user: k8sadmin
      command: argocd login {{ argocd_clusterip }} --insecure --username admin --password {{ argocd_password.stdout }}
      register: login_result
      changed_when: false
      failed_when: login_result.rc != 0

    - name: Display login result
      debug:
        var: login_result.stdout_lines

    - name: Change initial ArgoCD admin password
      become_user: k8sadmin
      when: secret_check.resources is defined and secret_check.resources | length > 0
      block:
        - name: Set new password fact
          set_fact:
            new_password: "{{ lookup('env', 'ANSIBLE_ARGOCD_SECRET') }}"
          #no_log: true
        
        - name: Debug new password
          debug:
            msg: "New password value: {{ new_password }}"

        - name: Update ArgoCD admin password
          command: argocd account update-password --current-password {{ argocd_password.stdout }} --new-password {{ new_password }}
          register: password_change
          changed_when: password_change.rc == 0
          failed_when: password_change.rc != 0

        - name: Delete initial admin secret
          kubernetes.core.k8s:
            api_version: v1
            kind: Secret
            name: argocd-initial-admin-secret
            namespace: argocd
            state: absent
          when: password_change is success
  
    - name: Set Github access Token
      set_fact: 
        GH_access_token: "{{ lookup('env', 'ANSIBLE_GH_TOKEN')}}"

    - name: Add repo in ArgoCD
      command: argocd repo add {{ git_repo_https}} --username {{ git_user }} --password {{ GH_access_token }}
      register: repo_add
      changed_when: repo_add.rc == 0
      failed_when: repo_add.rc != 0
      #no_log: true

    - name: Create application
      become_user: k8sadmin
      command: argocd app create zeeurl \
        --repo https://github.com/Zeeward41/ZeeUrl.git \
        --path infrastructure/CD/kubernetes \
        --dest-namespace default \
        --dest-server https://kubernetes.default.svc
      register: app_create
      changed_when: app_create.rc == 0
      failed_when: app_create.rc != 0

    - name: Sync app
      become_user: k8sadmin
      command: argocd app sync zeeurl
      register: app_sync
      changed_when: app_sync.rc == 0
      failed_when: app_sync.rc != 0