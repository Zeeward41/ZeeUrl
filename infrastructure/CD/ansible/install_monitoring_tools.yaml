- hosts: control_plane
  become: yes
  become_user: k8sadmin
  gather_facts: yes
  tasks:
    - name: Add Helm GPG key
    become: yes
    apt_key:
      url: https://baltocdn.com/helm/signing.asc
      keyring: /usr/share/keyrings/helm.gpg

    - name: Install apt-transport-https
      become: yes
      apt:
        name: apt-transport-https
        state: present
        update_cache: yes

    - name: Add Helm repository
      become: yes
      apt_repository:
        repo: "deb [arch={{ ansible_architecture }} signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main"
        state: present
        filename: helm-stable-debian.list

    - name: Install Helm
      become: yes
      apt:
        name: helm
        state: present
        update_cache: yes

      ##########

    - name: Add Helm repositories (prometheus and graphana)
      shell: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update

    - name: Install Prometheus using Helm
      shell: |
        helm install prometheus prometheus-community/prometheus \
          --namespace monitoring \
          --create-namespace

    - name: Get Graphana password
      set_fact:
        graphana_password_env: "{{ lookup('env', 'ANSIBLE_GRAPHANA_PASSWORD') }}"

    - name: Install Grafana using Helm
      shell: |
        helm install grafana grafana/grafana \
          --namespace monitoring \
          --set service.type=ClusterIP \
          --set persistence.enabled=true \
          --set adminPassword={{ graphana_password_env}}

    # - name: Change Service 
    #   kubernetes.core.k8s:
    #     api_version: v1
    #     kind: Service
    #     namespace: monitoring
    #     name: prometheus-server
    #     definition:
    #       spec:
    #         type: NodePort
    #         ports:
    #         - name: http
    #           port: 80
    #           protocol: TCP
    #           targetPort: 9000
    #           nodePort: 30080
    #         - name: https
    #           port: 443
    #           protocol: TCP
    #           targetPort: 9000
    #           nodePort: 30443
    #     state: patched
